# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running ‘nixos-help’).

{ config, pkgs, ... }:
let
  unstableTarball = fetchTarball
    "https://github.com/NixOS/nixpkgs/archive/nixpkgs-unstable.tar.gz";
in
{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      "${builtins.fetchGit { url = "https://github.com/NixOS/nixos-hardware.git"; }}/common/pc/laptop"
      "${builtins.fetchGit { url = "https://github.com/NixOS/nixos-hardware.git"; }}/common/cpu/intel"
      ./nvidia.nix
      # "${builtins.fetchGit { url = "https://github.com/NixOS/nixos-hardware.git"; }}/common/gpu/nvidia.nix"
      ./cronjobs.nix
      ./xmonad.nix
      ./cachix.nix
      # ./t15-1st-gen.nix
    ];
  
  nixpkgs.overlays = [
    (import (builtins.fetchTarball https://github.com/nix-community/emacs-overlay/archive/master.tar.gz))
  ];

#  nix = {
#    package = pkgs.nixFlakes;
#    extraOptions = ''
#      experimental-features = nix-command flakes
#    '';
#  };

  # Use the systemd-boot EFI boot loader.
  # boot.loader.systemd-boot.enable = true;
  boot.loader.efi = {
    canTouchEfiVariables = true;
  };
  boot.loader.systemd-boot.enable = true;
  boot.loader.grub.extraConfig = ''
    video=eDP-1:1920x1080
  '';
  boot.initrd.luks.devices.vg-crypt.device = "/dev/disk/by-uuid/edaa41ba-86eb-4208-b2cb-0be5d5155b79";
  boot.kernelPackages = pkgs.linuxPackages_latest;

  boot.extraModulePackages = with config.boot.kernelPackages; [ v4l2loopback] ;

  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.input-fonts.acceptLicense = true;

  nixpkgs.config.packageOverrides = pkgs: {
    unstable = import <nixos-unstable> { config = config.nixpkgs.config; };
  };

  networking = {
    hostName = "codemacher";
    useDHCP = false; # must be disabled in general, enabled for individual devices
    interfaces.wlp0s20f3.useDHCP = true;
    dhcpcd.extraConfig = ''
      nooption domain_name_servers, domain_name, domain_search, host_name
      nooption ntp_servers
      ''
    ;
    firewall = {
      allowPing = false;
#      allowedTCPPorts = [ 8080 8200 ]; # minidlna
#      allowedUDPPorts = [ 1900 ]; # minidlna
      allowedTCPPortRanges = [{ from = 1714; to = 1764; }]; # kde-connect
      allowedUDPPortRanges = [{ from = 1714; to = 1764; }]; # kde-connect
    };
    nameservers = [
       "208.67.222.222" # OpenDNS
#      "5.9.164.112" # Digitalcourage - sehr langsam
      "195.10.195.195" # OpenNIC - zeitweise langsam
      "1.1.1.1" # Cloudflare
#      "8.8.8.8" # "2001:4860:4860::8888" "2001:4860:4860::8844" # Google
#      "194.36.144.87" "2a03:4000:4d:c92:88c0:96ff:fec6:b9d" # OpenNIC
#      "94.247.43.254" "2a00:f826:8:1::254" # OpenNIC
    ];
    networkmanager = {
      enable = true;
      dns = "none";
    };
    resolvconf.dnsSingleRequest = true;
  };

  # Select internationalisation properties.
  i18n.defaultLocale = "en_GB.UTF-8";
  # i18n.supportedLocales = [ "en_GB.UTF-8" "en_US.UTF-8" "de_DE.UTF-8" ];
  console = {
    font = "Lat2-Terminus16";
    keyMap = "de";
  };

  # Set your time zone.
  time.timeZone = "Europe/Berlin";

  # $ nix search wget
  environment.systemPackages = with pkgs; [
    bluez-alsa

    (writeShellScriptBin "nix-flakes" ''
      exec ${nixFlakes}/bin/nix --experimental-features "nix-command flakes" "$@"
    '')

    antigen
    any-nix-shell
    aspell aspellDicts.en aspellDicts.en-computers aspellDicts.en-science
    bat jq
    binutils coreutils fd file bind lsof usbutils
    clang
    cmus
    dbeaver
    direnv lorri
    docker docker-compose
    elisa
    (emacsUnstable.override {
      withGTK3 = true;
      withGTK2 = false;
    })
    ffmpeg
    firefox
    flacon
    gcal
    git qgit
    ghc cabal-install hlint
    gnupg
    hikari waybar fuzzel wofi pavucontrol mako
    httpie wget
    home-manager
    gimp imagemagick graphviz inkscape plantuml
    isync # provides mbsync
    (leiningen.override {
      jdk = jdk;
    })
    jdk
    libreoffice
    mplayer smplayer kmplayer mpv-with-scripts
    nano
    neofetch htop
    neovim
    neomutt w3m urlview mu
    nixfmt
    nodejs-12_x
    notify-desktop
    oh-my-zsh
    openvpn
    pandoc
    pciutils # provides lspcip
    performous
    python3
    ranger ueberzug
    rawdog
    ripgrep silver-searcher
    rlwrap
    # scribus
    haskellPackages.ShellCheck
    ripcord
    stow
    sqlite
    taskwarrior
    tectonic
    termite
    transmission tremc
    tree
    zip unzip
    vscodium
    wpsoffice

    xorg.xmodmap xorg.xev xclip

    kcolorchooser
    gwenview
    kdialog xdg-desktop-portal xdg-desktop-portal-kde
    okular kdeconnect
    latte-dock
    yakuake
    kmail
    qt5.qtgraphicaleffects
    libsForQt5.qmltermwidget
    plasma5Packages.bismuth
    kompare

    sof-firmware libwacom
  ];

  hardware.opengl = {
    driSupport32Bit = true;
    extraPackages32 = with pkgs.pkgsi686Linux; [ libva ];
  };

  fonts.fonts = with pkgs; [
    alegreya
    fira
    fira-code
    fira-code-symbols
    fira-mono
    hasklig
    league-of-moveable-type
    montserrat
    powerline-fonts
    recursive
    roboto
    roboto-mono
    siji
    unifont
    victor-mono
  ];

  virtualisation.docker.enable = true;
  virtualisation.virtualbox.host.enable = true;
  nixpkgs.config.virtualbox.host.enableExtensionPack = true;
  services.lorri.enable = true;

  # services.minidlna.enable = true;

  # PG for Rebike1
  services.postgresql = {
    enable = true;
    package = pkgs.postgresql_12;
    enableTCPIP = true;
    authentication = pkgs.lib.mkOverride 10 ''
      local	all 	all 			trust
      host 	all 	all 	127.0.0.1/32 	trust
      host	all	  all	  0.0.0.0/32	  trust
      host 	all 	all 	::1/128 	    trust
    '';
    ensureDatabases = [ "test" "rebike1_erp" ];
    initialScript = pkgs.writeText "postgres-initScript" ''
      CREATE ROLE hermann LOGIN SUPERUSER;
      CREATE ROLE rebike1_erp LOGIN SUPERUSER;
    '';
  };

  # Power management
  services.tlp.enable = true;

  # Enable CUPS to print documents.
  services.printing.enable = true;
  services.printing.drivers = [ pkgs.brlaser ];

  # Enable sound.
  sound.enable = true;
  hardware.pulseaudio = {
    enable = false;
  };
  hardware.bluetooth = { enable = true; package = pkgs.bluezFull; };
  hardware.opengl.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    socketActivation = true;
    media-session.config.bluez-monitor.rules = [
      {
        # Matches all cards
        matches = [ { "device.name" = "~bluez_card.*"; } ];
        actions = {
          "update-props" = {
            "bluez5.reconnect-profiles" = [ "hfp_hf" "hsp_hs" "a2dp_sink" ];
            # mSBC is not expected to work on all headset + adapter combinations.
            "bluez5.msbc-support" = true;
            # SBC-XQ is not expected to work on all headset + adapter combinations.
            "bluez5.sbc-xq-support" = true;
          };
        };
      }
      {
        matches = [
          # Matches all sources
          { "node.name" = "~bluez_input.*"; }
          # Matches all outputs
          { "node.name" = "~bluez_output.*"; }
        ];
        actions = {
          "node.pause-on-idle" = false;
        };
      }
    ];
  };

  # Enable the X11 windowing system.
  services.xserver.enable = true;
  services.xserver.layout = "de";
  # services.xserver.xkbOptions = "eurosign:e";
  services.xserver.wacom.enable = true;

  services.flatpak.enable = true;
  xdg.portal.enable = true;

  # Enable touchpad support.
  services.xserver.libinput.enable = true;
  services.xserver.libinput.touchpad.naturalScrolling = false;

  # Enable the KDE Desktop Environment.
  services.xserver.displayManager.sddm = {
    enable = true;
  };
  services.xserver.displayManager.autoLogin = {
    user = "hermann";
    enable = false;
  };
  # services.xserver.windowManager.awesome.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;
  services.acpid.enable = true;

  services.emacs = { install = true; enable = false; };

  programs.npm.enable = true;
  programs.adb.enable = true;

  # Define a user account. Don't forget to set a password with ‘passwd’.
  programs.zsh = {
    enable = true;
    vteIntegration = true;
  };
  programs.zsh.interactiveShellInit = ''
    setopt correct                                                  # Auto correct mistakes
    setopt extendedglob                                             # Extended globbing. Allows using regular expressions with *
    setopt nocaseglob                                               # Case insensitive globbing
    setopt rcexpandparam                                            # Array expension with parameters
    setopt nocheckjobs                                              # Don't warn about running processes when exiting
    setopt numericglobsort                                          # Sort filenames numerically when it makes sense
    setopt nobeep                                                   # No beep
    setopt appendhistory                                            # Immediately append history instead of overwriting
    setopt histignorealldups                                        # If a new command is a duplicate, remove the older one
    setopt autocd                                                   # if only directory path is entered, cd there.
    zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
    zstyle ':completion:*' menu select=1
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion

    zstyle ':completion:*' rehash true                              # automatically find new executables in path
    # Speed up completions
    zstyle ':completion:*' accept-exact '*(N)'
    zstyle ':completion:*' use-cache on
    zstyle ':completion:*' cache-path ~/.zsh/cache
    HISTFILE=~/.zhistory
    HISTSIZE=1000
    SAVEHIST=500

    export EDITOR="emacsclient -nw -c"
    export VISUAL="emacsclient -c"
    export SUDO_EDITOR="emacsclient -c"

    ## Keybindings section
    bindkey -e
    bindkey '^[[7~' beginning-of-line                               # Home key
    bindkey '^[[H' beginning-of-line                                # Home key
    bindkey '^[[8~' end-of-line                                     # End key
    bindkey '^[[F' end-of-line                                     # End key
    bindkey '^[[2~' overwrite-mode                                  # Insert key
    bindkey '^[[3~' delete-char                                     # Delete key
    bindkey '^[[C'  forward-char                                    # Right key
    bindkey '^[[D'  backward-char                                   # Left key
    # bindkey '^[[5~' history-beginning-search-backward               # Page up key
    # bindkey '^[[6~' history-beginning-search-forward                # Page down key

    # Navigate words with ctrl+arrow keys
    bindkey '^[Oc' forward-word                                     #
    bindkey '^[Od' backward-word                                    #
    bindkey '^[[1;5D' backward-word                                 #
    bindkey '^[[1;5C' forward-word                                  #
    bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
    bindkey '^[[Z' undo                                             # Shift+tab undo last action

    ## Alias section
    alias cp="cp -i"                                                # Confirm before overwriting something
    alias df='df -h'                                                # Human-readable sizes
    alias free='free -m'                                            # Show sizes in MB

    setopt prompt_subst

    prefix-all-files-with() {
      for FILE in *; do
        mv "$FILE" "$1$FILE"
      done
    }

    # Color man pages
    export LESS_TERMCAP_mb=$'\E[01;32m'
    export LESS_TERMCAP_md=$'\E[01;32m'
    export LESS_TERMCAP_me=$'\E[0m'
    export LESS_TERMCAP_se=$'\E[0m'
    export LESS_TERMCAP_so=$'\E[01;47;34m'
    export LESS_TERMCAP_ue=$'\E[0m'
    export LESS_TERMCAP_us=$'\E[01;36m'
    export LESS=-r

    source /

    # bind UP and DOWN arrow keys to history substring search
    zmodload zsh/terminfo
    bindkey "$terminfo[kcuu1]" history-substring-search-up
    bindkey "$terminfo[kcud1]" history-substring-search-down
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down

    export ZSH=${pkgs.oh-my-zsh}/share/oh-my-zsh/
    source ${pkgs.antigen}/share/antigen/antigen.zsh
    source ${pkgs.zsh-history-substring-search}/share/zsh-history-substring-search/zsh-history-substring-search.zsh
    antigen use oh-my-zsh
    antigen bundle docker
    antigen bundle docker-compose
    antigen bundle git
    antigen bundle lein
    antigen bundle heroku
    antigen bundle taskwarrior
    antigen bundle urltools
    antigen bundle zsh-users/zsh-syntax-highlighting
    antigen bundle zsh-users/zsh-history-substring-search
    antigen bundle hlissner/zsh-autopair
    antigen bundle halfo/lambda-mod-zsh-theme
    antigen theme halfo/lambda-mod-zsh-theme
    antigen apply

    git-clean-branches() {
      if [[ "$1" == "--force" ]]; then
        DELETE_PARAM=-D
      else
        DELETE_PARAM=-d
      fi
      git remote prune origin
      echo Done pruning branches. Deleting branches with "$DELETE_PARAM"
      git branch -v | \
        grep "\[gone\]" | \
        awk '{print $1}' | \
        xargs git branch "$DELETE_PARAM" || \
        echo "Nothing to delete"
    }
    alias ls='ls -sh --color=auto'
    alias ecl='emacsclient -n -c'
    alias git-root='git rev-parse --show-toplevel'
    alias cd-git-root='cd $(git-root)'
    alias pbcopy='xclip -selection clipboard'
    alias pbpaste='xclip -selection clipboard -o'
  '';
  programs.zsh.promptInit = ""; # avoid conflict with oh-my...

  users.mutableUsers = false;
  users.users.hermann = {
    isNormalUser = true;
    extraGroups = [ "audio" "wheel" "docker" "networkmanager" "postgres" "vboxusers" "video" ]; # Enable ‘sudo’ for the user.
    uid = 1000;
    hashedPassword = "$6$mrCHK6cTmLdSwDO.$jwhAak9dTogb/o50lSEvvN7UWr7aWeoLmIS1ZYuQu8gNA5y7tab2nEXTqaOGS.7mAUD0GwNZhcPlBRcni9utO/";
    shell = pkgs.zsh;
  };

  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "20.09"; # Did you read the comment?

  nixpkgs.config.firefox.enablePlasmaBrowserIntegration = true;
}
